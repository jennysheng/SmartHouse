
SmartHouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000035a  000003ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080012a  0080012a  00000418  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba9  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b5  00000000  00000000  000010a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000530  00000000  00000000  0000185e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00001d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000418  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000357  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002683  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_1>
   8:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 34       	cpi	r26, 0x44	; 68
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  9e:	0c 94 ab 01 	jmp	0x356	; 0x356 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putc>:
	X=ADC;
	itoa(X, o, 10);//decimal
	uart_putc("LDR");		
	uart_puts(o);
	_delay_ms(1000);
	uart_puts("\t\t");
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <uart_putc+0x4>
  b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b4:	08 95       	ret

000000b6 <uart_puts>:
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	ec 01       	movw	r28, r24
  bc:	88 81       	ld	r24, Y
  be:	88 23       	and	r24, r24
  c0:	31 f0       	breq	.+12     	; 0xce <uart_puts+0x18>
  c2:	21 96       	adiw	r28, 0x01	; 1
  c4:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putc>
  c8:	89 91       	ld	r24, Y+
  ca:	81 11       	cpse	r24, r1
  cc:	fb cf       	rjmp	.-10     	; 0xc4 <uart_puts+0xe>
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <initADC>:
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	10 82       	st	Z, r1
  e0:	80 81       	ld	r24, Z
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	80 83       	st	Z, r24
  e6:	80 81       	ld	r24, Z
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	80 83       	st	Z, r24
  f2:	80 81       	ld	r24, Z
  f4:	84 60       	ori	r24, 0x04	; 4
  f6:	80 83       	st	Z, r24
  f8:	80 81       	ld	r24, Z
  fa:	86 fd       	sbrc	r24, 6
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <initADC+0x24>
  fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 102:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 106:	08 95       	ret

00000108 <Tempvind>:
 108:	ec e7       	ldi	r30, 0x7C	; 124
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	82 60       	ori	r24, 0x02	; 2
 112:	80 83       	st	Z, r24
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	80 83       	st	Z, r24
 11e:	80 81       	ld	r24, Z
 120:	86 fd       	sbrc	r24, 6
 122:	fd cf       	rjmp	.-6      	; 0x11e <Tempvind+0x16>
 124:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 128:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 12c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <Z+0x1>
 130:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <Z>
 134:	4a e0       	ldi	r20, 0x0A	; 10
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	6a e2       	ldi	r22, 0x2A	; 42
 13a:	71 e0       	ldi	r23, 0x01	; 1
 13c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <itoa>
 140:	8b e0       	ldi	r24, 0x0B	; 11
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putc>
 148:	8a e2       	ldi	r24, 0x2A	; 42
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_puts>
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	83 ed       	ldi	r24, 0xD3	; 211
 154:	90 e3       	ldi	r25, 0x30	; 48
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <Tempvind+0x4e>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <Tempvind+0x58>
 160:	00 00       	nop
 162:	88 e0       	ldi	r24, 0x08	; 8
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_puts>
 16a:	08 95       	ret

0000016c <serialInit>:
	
	
}
void serialInit() {
	/* Set the baud rate */
	UBRR0H = (unsigned char) ((MYUBRR)>>8);
 16c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) MYUBRR;
 170:	87 e6       	ldi	r24, 0x67	; 103
 172:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* Frame format: 8data, No parity, 1stop bit */
	UCSR0C = (3 << UCSZ00);
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	/* Enable receiver and transmitter to engage in communication! */
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXCIE0)| (1<<TXEN0);
 17c:	88 ed       	ldi	r24, 0xD8	; 216
 17e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 182:	08 95       	ret

00000184 <main>:
	//                    1.elförbrukning, 2.skymning, 3. elavbrott.
	// Output signal: Timer1, Time2, 1.lighting indoor,2.inbrottsalarm ljudet, 3.inbrottsalarm lamp. 4. Fan 5. element/radiator.
	
	
	char c;
	serialInit();
 184:	0e 94 b6 00 	call	0x16c	; 0x16c <serialInit>
	
	//---------------------------------------------------------------interruptSetup();
	EIMSK = 1<<INT0 | 1<<INT1 ;					         // Enable External interrupt INT0 and INT1
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	8d bb       	out	0x1d, r24	; 29
	EICRA = 1<<ISC01 | 1<<ISC00;	            // Trigger INT0 on rising edge 
 18c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	PCMSK0= 1<<PCINT3; 
 190:	88 e0       	ldi	r24, 0x08	; 8
 192:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	
	
	sei();
 196:	78 94       	sei
	

	
	initADC();
 198:	0e 94 6a 00 	call	0xd4	; 0xd4 <initADC>
	//Tempout();
	Tempvind();
 19c:	0e 94 84 00 	call	0x108	; 0x108 <Tempvind>
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <main+0x1c>

000001a2 <__vector_1>:
	UCSR0B = (1 << RXEN0) | (1 << RXCIE0) | (1 << TXCIE0)| (1<<TXEN0);
	
}

//Receive interrupt
ISR (INT0_vect){
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	//1. window alarm. 2.fire alarm. 3. stove/spis. 4. water leakage.
	DDRD = 0<<PIND2;//input
 1c4:	1a b8       	out	0x0a, r1	; 10
	PIND =1 << PIND2;
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	89 b9       	out	0x09, r24	; 9
	
	DDRB=0xf0;
 1ca:	80 ef       	ldi	r24, 0xF0	; 240
 1cc:	84 b9       	out	0x04, r24	; 4
	PINB |=(0<<PINB0)|(0<<PINB3)|(0<<PINB5)|(0<<PINB4);//nullställ
 1ce:	83 b1       	in	r24, 0x03	; 3
 1d0:	83 b9       	out	0x03, r24	; 3
	//PINB |=(0<<PINB0)|(0<<PINB3)|(0<<PINB5)|(1<<PINB4);//sound-------------------------------------------------------------------
	PINB |=(0<<PINB0)|(0<<PINB3)|(0<<PINB5)|(0<<PINB4);//nullställ
 1d2:	83 b1       	in	r24, 0x03	; 3
 1d4:	83 b9       	out	0x03, r24	; 3
	
	uart_puts("Fire");
 1d6:	84 e1       	ldi	r24, 0x14	; 20
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_puts>
	uart_puts ("\n\r");  
 1de:	89 e1       	ldi	r24, 0x19	; 25
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_puts>
}
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	bf 91       	pop	r27
 1ec:	af 91       	pop	r26
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	7f 91       	pop	r23
 1f4:	6f 91       	pop	r22
 1f6:	5f 91       	pop	r21
 1f8:	4f 91       	pop	r20
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_2>:
	
	
	


ISR (INT1_vect){
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	2f 93       	push	r18
 214:	3f 93       	push	r19
 216:	4f 93       	push	r20
 218:	5f 93       	push	r21
 21a:	6f 93       	push	r22
 21c:	7f 93       	push	r23
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	af 93       	push	r26
 224:	bf 93       	push	r27
 226:	ef 93       	push	r30
 228:	ff 93       	push	r31
	//inbrottsalarm PD3   
	DDRD = 0<<PIND3;
 22a:	1a b8       	out	0x0a, r1	; 10
	PIND = 0<<PIND3;// pull down
 22c:	19 b8       	out	0x09, r1	; 9
	
	DDRB=0xf0;
 22e:	80 ef       	ldi	r24, 0xF0	; 240
 230:	84 b9       	out	0x04, r24	; 4
	PINB |=(0<<PINB0)|(0<<PINB3)|(0<<PINB5)|(0<<PINB4);
 232:	83 b1       	in	r24, 0x03	; 3
 234:	83 b9       	out	0x03, r24	; 3
	//PINB |=(1<<PINB0)|(1<<PINB3)|(0<<PINB5)|(0<<PINB4);	//light and sound on -----------------------------------
	PINB |=(1<<PINB0)|(1<<PINB3)|(0<<PINB5)|(1<<PINB4);	//inbrottsalarm lamp off
 236:	83 b1       	in	r24, 0x03	; 3
 238:	89 61       	ori	r24, 0x19	; 25
 23a:	83 b9       	out	0x03, r24	; 3
	
	uart_puts("inbrottsalarm");
 23c:	8c e1       	ldi	r24, 0x1C	; 28
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_puts>
	uart_puts ("\n\r");
 244:	89 e1       	ldi	r24, 0x19	; 25
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_puts>
	
	
	
}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_18>:

//Receive interrupt
ISR(USART_RX_vect){
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
	char sendData = UDR0;	
 27c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	if(sendData == 'F'){		
 280:	86 34       	cpi	r24, 0x46	; 70
 282:	21 f4       	brne	.+8      	; 0x28c <__vector_18+0x1e>
		DDRB= 1<<PINB2;//output fan working 
 284:	94 e0       	ldi	r25, 0x04	; 4
 286:	94 b9       	out	0x04, r25	; 4
		PINB|=1<<PINB2;// fan
 288:	1a 9a       	sbi	0x03, 2	; 3
 28a:	1c c0       	rjmp	.+56     	; 0x2c4 <__vector_18+0x56>
		
		
		}else if(sendData == 'B'){			
 28c:	82 34       	cpi	r24, 0x42	; 66
 28e:	49 f4       	brne	.+18     	; 0x2a2 <__vector_18+0x34>
			DDRB=0xf0;
 290:	90 ef       	ldi	r25, 0xF0	; 240
 292:	94 b9       	out	0x04, r25	; 4
			PINB |=(0<<PINB0)|(0<<PINB3)|(0<<PINB5)|(0<<PINB4);	
 294:	93 b1       	in	r25, 0x03	; 3
 296:	93 b9       	out	0x03, r25	; 3
		   // PINB |=(1<<PINB0)|(1<<PINB3)|(1<<PINB5)|(0<<PINB4);	// turn on the outdoor light
		//	PINB |=(1<<PINB0)|(1<<PINB3)|(1<<PINB5)|(0<<PINB4);// turn off the outdoor light
		    PINB |=(0<<PINB0)|(1<<PINB3)|(0<<PINB5)|(1<<PINB4);	// turn off the indoor lighting
 298:	93 b1       	in	r25, 0x03	; 3
 29a:	98 61       	ori	r25, 0x18	; 24
 29c:	93 b9       	out	0x03, r25	; 3
		    PINB |=(0<<PINB0)|(1<<PINB3)|(0<<PINB5)|(0<<PINB4);	// turn on the indoor lighting
 29e:	1b 9a       	sbi	0x03, 3	; 3
 2a0:	11 c0       	rjmp	.+34     	; 0x2c4 <__vector_18+0x56>
		
	}else if(sendData=='E'){
 2a2:	85 34       	cpi	r24, 0x45	; 69
 2a4:	39 f4       	brne	.+14     	; 0x2b4 <__vector_18+0x46>
		PINB |=(1<<PINB0)|(0<<PINB3)|(1<<PINB5)|(1<<PINB4);	// turn off the element
 2a6:	93 b1       	in	r25, 0x03	; 3
 2a8:	91 63       	ori	r25, 0x31	; 49
 2aa:	93 b9       	out	0x03, r25	; 3
		PINB |=(0<<PINB0)|(1<<PINB3)|(0<<PINB5)|(1<<PINB4);	// turn on the element
 2ac:	93 b1       	in	r25, 0x03	; 3
 2ae:	98 61       	ori	r25, 0x18	; 24
 2b0:	93 b9       	out	0x03, r25	; 3
 2b2:	08 c0       	rjmp	.+16     	; 0x2c4 <__vector_18+0x56>
		
	}else if(sendData=='C'){
 2b4:	83 34       	cpi	r24, 0x43	; 67
 2b6:	31 f4       	brne	.+12     	; 0x2c4 <__vector_18+0x56>
	PINB |=(1<<PINB0)|(0<<PINB3)|(1<<PINB5)|(1<<PINB4);	// turn off the element
 2b8:	93 b1       	in	r25, 0x03	; 3
 2ba:	91 63       	ori	r25, 0x31	; 49
 2bc:	93 b9       	out	0x03, r25	; 3
	PINB |=(0<<PINB0)|(1<<PINB3)|(0<<PINB5)|(1<<PINB4);	// turn on the element
 2be:	93 b1       	in	r25, 0x03	; 3
 2c0:	98 61       	ori	r25, 0x18	; 24
 2c2:	93 b9       	out	0x03, r25	; 3
	
}
	UDR0 = sendData;
 2c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <itoa>:
 2d6:	45 32       	cpi	r20, 0x25	; 37
 2d8:	51 05       	cpc	r21, r1
 2da:	20 f4       	brcc	.+8      	; 0x2e4 <itoa+0xe>
 2dc:	42 30       	cpi	r20, 0x02	; 2
 2de:	10 f0       	brcs	.+4      	; 0x2e4 <itoa+0xe>
 2e0:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__itoa_ncheck>
 2e4:	fb 01       	movw	r30, r22
 2e6:	10 82       	st	Z, r1
 2e8:	cb 01       	movw	r24, r22
 2ea:	08 95       	ret

000002ec <__itoa_ncheck>:
 2ec:	bb 27       	eor	r27, r27
 2ee:	4a 30       	cpi	r20, 0x0A	; 10
 2f0:	31 f4       	brne	.+12     	; 0x2fe <__itoa_ncheck+0x12>
 2f2:	99 23       	and	r25, r25
 2f4:	22 f4       	brpl	.+8      	; 0x2fe <__itoa_ncheck+0x12>
 2f6:	bd e2       	ldi	r27, 0x2D	; 45
 2f8:	90 95       	com	r25
 2fa:	81 95       	neg	r24
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	0c 94 82 01 	jmp	0x304	; 0x304 <__utoa_common>

00000302 <__utoa_ncheck>:
 302:	bb 27       	eor	r27, r27

00000304 <__utoa_common>:
 304:	fb 01       	movw	r30, r22
 306:	55 27       	eor	r21, r21
 308:	aa 27       	eor	r26, r26
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	aa 1f       	adc	r26, r26
 310:	a4 17       	cp	r26, r20
 312:	10 f0       	brcs	.+4      	; 0x318 <__utoa_common+0x14>
 314:	a4 1b       	sub	r26, r20
 316:	83 95       	inc	r24
 318:	50 51       	subi	r21, 0x10	; 16
 31a:	b9 f7       	brne	.-18     	; 0x30a <__utoa_common+0x6>
 31c:	a0 5d       	subi	r26, 0xD0	; 208
 31e:	aa 33       	cpi	r26, 0x3A	; 58
 320:	08 f0       	brcs	.+2      	; 0x324 <__utoa_common+0x20>
 322:	a9 5d       	subi	r26, 0xD9	; 217
 324:	a1 93       	st	Z+, r26
 326:	00 97       	sbiw	r24, 0x00	; 0
 328:	79 f7       	brne	.-34     	; 0x308 <__utoa_common+0x4>
 32a:	b1 11       	cpse	r27, r1
 32c:	b1 93       	st	Z+, r27
 32e:	11 92       	st	Z+, r1
 330:	cb 01       	movw	r24, r22
 332:	0c 94 9b 01 	jmp	0x336	; 0x336 <strrev>

00000336 <strrev>:
 336:	dc 01       	movw	r26, r24
 338:	fc 01       	movw	r30, r24
 33a:	67 2f       	mov	r22, r23
 33c:	71 91       	ld	r23, Z+
 33e:	77 23       	and	r23, r23
 340:	e1 f7       	brne	.-8      	; 0x33a <strrev+0x4>
 342:	32 97       	sbiw	r30, 0x02	; 2
 344:	04 c0       	rjmp	.+8      	; 0x34e <strrev+0x18>
 346:	7c 91       	ld	r23, X
 348:	6d 93       	st	X+, r22
 34a:	70 83       	st	Z, r23
 34c:	62 91       	ld	r22, -Z
 34e:	ae 17       	cp	r26, r30
 350:	bf 07       	cpc	r27, r31
 352:	c8 f3       	brcs	.-14     	; 0x346 <strrev+0x10>
 354:	08 95       	ret

00000356 <_exit>:
 356:	f8 94       	cli

00000358 <__stop_program>:
 358:	ff cf       	rjmp	.-2      	; 0x358 <__stop_program>
